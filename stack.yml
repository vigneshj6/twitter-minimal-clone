AWSTemplateFormatVersion: 2010-09-09
Description: "twitter-clone cloudformation"

Parameters:
  Environment:
    Description: Environment Name
    Type: String
    Default: dev
  RDSUserName:
    Description: DB User Name
    Type: String
    Default: devuser
  RDSDBName:
    Description: DB Name
    Type: String
    Default: twitterdb

Resources:
  rdsRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'password'
      Description: 'RDS postgres Instance'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${!Ref RDSUserName}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  dbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBName: !Ref RDSDBName
      Engine: postgres
      MasterUsername: !Ref RDSUserName
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref rdsRotationSecret, ':SecretString:password}}' ]]
      MultiAZ: False
      PubliclyAccessible: True      
      StorageType: gp2
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: 'rotation-instance'

  secretRDSAttschment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref rdsRotationSecret
      TargetId: !Ref dbInstance
      TargetType: AWS::RDS::DBInstance

  lambdaFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Sample Lambda"
      FunctionName: !Sub sample-lambda-${Environment}
      Handler: dist-functions/functions/run-migrations.execute
      MemorySize: 512
      Role: !GetAtt lambdaFunctionIamRole.Arn
      Runtime: nodejs16.x
      Timeout: 300
      Code:
        S3Bucket: vigneshj-twitter-clone
        S3Key: lambda.zip
      Environment:
        Variables:
          databaseHost: !GetAtt dbInstance.Endpoint.Address
          databaseName: !Ref RDSDBName
          databaseUser: !Ref RDSUserName
          databasePassword: !Sub '{{resolve:secretsmanager:password:SecretString:password}}'
          version: '1.0.4'
    DependsOn: dbInstance
  
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: twitter-api

  apiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt
        - apiGateway
        - RootResourceId
      PathPart: !Sub sample-lambda-${Environment}
    DependsOn:
      - apiGateway

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref apiGatewayResource
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: stage
      Description: "stagging"

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/sample-lambda-${Environment}

  application:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0f540e9f488cfa27d
      KeyName: aws-key1
      SecurityGroups:
        - !Ref appSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        export databaseHost=${!GetAtt dbInstance.Endpoint.Address}
        export databaseName=${!Ref RDSDBName}
        export databaseUser=${!Ref RDSUserName}
        export databasePassword='{{resolve:secretsmanager:password:SecretString:password}}' 
        apt-get update -qq
        apt-get install -y apt-transport-https ca-certificates
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
        . ~/.nvm/nvm.sh
        nvm install --lts

  appSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for the app nodes that allow ssh, http and docker ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

Outputs:
  RootUrl: 
    Description: Root URL of the API gateway,
    Value: !Join ['', ['https://', !Ref apiGateway , '.execute-api.eu-west-2' , '.amazonaws.com']]