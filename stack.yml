AWSTemplateFormatVersion: 2010-09-09
Description: "twitter-clone cloudformation"

Parameters:
  Environment:
    Description: Environment Name
    Type: String
    Default: dev
  RDSUserName:
    Description: DB User Name
    Type: String
    Default: devuser
  RDSDBName:
    Description: DB Name
    Type: String
    Default: twitterdb

Resources:
  rdsRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'password'
      Description: 'RDS postgres Instance'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${!Ref RDSUserName}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  dbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      DBName: !Ref RDSDBName
      Engine: mysql
      MasterUsername: !Ref RDSUserName
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref rdsRotationSecret, ':SecretString:password}}' ]]
      MultiAZ: False
      PubliclyAccessible: False      
      StorageType: gp2
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: 'rotation-instance'

  secretRDSAttschment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref rdsRotationSecret
      TargetId: !Ref dbInstance
      TargetType: AWS::RDS::DBInstance

  lambdaFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Sample Lambda"
      FunctionName: !Sub sample-lambda-${Environment}
      Handler: functions/run-migrations.execute
      MemorySize: 128
      Role: !GetAtt lambdaFunctionIamRole.Arn
      Runtime: nodejs16.x
      Timeout: 30
      Code:
        S3Bucket: vigneshj-twitter-clone
        S3Key: lambda.zip
      Environment:
        Variables:
          databaseHost: !GetAtt database.Endpoint.Address
          databaseName: !Ref RDSDBName
          databaseUser: !Ref RDSUserName
          databasePassword: !Sub '{{resolve:secretsmanager:password:SecretString:password}}'
  
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: twitter-api

  apiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt
        - apiGateway
        - RootResourceId
      PathPart: !Sub sample-lambda-${Environment}
    DependsOn:
      - apiGateway

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref apiGatewayResource
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: stage
      StageDescription:
        Description: Stage - DEV
        LoggingLevel: INFO
        MetricsEnabled: True
        MethodSettings:
          - ResourcePath: "/sample-lambda-dev"
            HttpMethod: "POST"
            LoggingLevel: INFO
            MetricsEnabled: True

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/sample-lambda-dev
