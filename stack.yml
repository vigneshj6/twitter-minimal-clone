AWSTemplateFormatVersion: 2010-09-09
Description: "twitter-clone cloudformation"

Parameters:
  Environment:
    Description: Environment Name
    Type: String
    Default: dev

Resources:
  lambdaFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Sample Lambda"
      FunctionName: !Sub sample-lambda-${Environment}
      Handler: src/handler.hello
      MemorySize: 128
      Role: !GetAtt lambdaFunctionIamRole.Arn
      Runtime: nodejs16.x
      Timeout: 30
      Code:
        S3Bucket: lambda-functions
        S3Key: lambda.zip
  
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: twitter-api

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: twitter-api

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: twitter-api
      StageName: stage